{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EGRMGMT 590.10 Homework 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Due at 6:15pm ET on Thursday, February 6*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Make sure you have pandas, NumPy, SciPy, Matplotlib, seaborn, and scikit-learn installed before working on the assignment.\n",
    "+ There are 12 exercises all of which require coding. Your grades are based on the accuracy of the results, not the code execution speed.\n",
    "    + Exercise 1 to 6, 8, and 10 to 12: each is worth 0.5 points. \n",
    "    + Exercise 7: 1 point.\n",
    "    + Exercise 9: 4 points.\n",
    "+ Exercises are dependent on prior exercises. Please work on them in the pre-determined order.\n",
    "+ Submit the .ipynb and .py files to Sakai before 6:15pm ET on Thursday, February 6.\n",
    "+ Assignments handed in late will lose 1 point every 24-hour window after 6:15pm ET on Thursday, February 6."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Dataset Information:**\n",
    "\n",
    "The dataset is from the results of a chemical analysis of wines grown in the same region in Italy but derived from three    different cultivars. The first variable in the dataset indicates the cultivar. The remaining 13 variables are the quantities of 13 constituents found in each of the three types of wines.\n",
    "\n",
    "0. Cultivar\n",
    "1. Alcohol \n",
    "2. Malic acid \n",
    "3. Ash \n",
    "4. Alcalinity of ash \n",
    "5. Magnesium \n",
    "6. Total phenols \n",
    "7. Flavanoids \n",
    "8. Nonflavanoid phenols \n",
    "9. Proanthocyanins \n",
    "10. Color intensity \n",
    "11. Hue \n",
    "12. OD280/OD315 of diluted wines \n",
    "13. Proline \n",
    "\n",
    "**Dataset Source:**\n",
    "https://archive.ics.uci.edu/ml/datasets/wine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise Overview**\n",
    "\n",
    "+ We'll conduct cluster analysis using the 13 variables (i.e. excluding 'Cultivar') in the dataset and group wines into natural clusters. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use the read_csv() function of pandas to read the wine dataset directly from its URL (https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data) to a pandas DataFrame df\n",
    "+ Display the first five rows of data in df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Rename the columns of df using a list ['Cultivar', 'Alcohol', 'MalicAcid', 'Ash', 'AlcalinityAsh', 'Magnesium', 'TotPhenols', 'Flavanoids', 'NonflavanoidPhenols', 'Proanthocyanins', 'ColorIntensity', 'Hue', 'OD280/OD315Diluted', 'Proline']\n",
    "+ Display the last five rows of data in df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use the seaborn library to create a matrix of scatter plots for all the variables in df, excluding 'Cultivar'\n",
    "+ Set the diagnal subplots as histograms for univariate distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Create a new pandas DataFrame df_standardized which has the standardized values of each column in df, excluding 'Cultivar'. \n",
    "+ Column names of df_standardized match corresponding columns in df\n",
    "+ Display the summary statistics (i.e. count, mean, std, min, 1st/2nd/3rd quartile, and max) by column for df_standardized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use sklearn's KMeans to conduct k-means clustering with k = 3 for df_standardized using randomly chosen initial centroids\n",
    "+ Assign cluster membership to each instance in df_standardized. Save the cluster membership labels of all the instances to a ndarray y_pred1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate the average silhouette scores across instances within each cluster created in Excercise 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a silhouette diagram for the k-means clustering completed in Excercise 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " + Create an \"elbow chart\" to determine the optimal number of clusters for df_standardized\n",
    " + In the \"elbow chart\", the cluster inertia is the y axis and the number of clusters is the x axis\n",
    " + Determine what the optimal number of clusters would be and explain why"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Complete the Python code in myKMeans_Question.py\n",
    "+ The myKMeans function needs to call all the other functions defined in myKMeans_Question.py\n",
    "+ Import the myKMeans function from myKMeans_Question.py\n",
    "+ Conduct the cluster analysis for df_standardized using myKMeans and show the resulting k cluster centroids\n",
    "+ Compare the cluster centroids myKMeans returns and sklearn's built-in KMeans returns when using the same k and same random state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Conduct another k-means cluster analysis on the un-standardized data df, excluding 'Cultivar', with k = 3 using randomly chosen initial centroids\n",
    "+ Assign cluster membership to each instance in the un-standardized dataset. Save the cluster membership labels of all the instances to a ndarray y_pred2\n",
    "+ Create a crosstab to compare the resulting clustering membership against the original label 'Cultivar' in df\n",
    "+ Create another crosstab to compare the clustering membership of Exercise 5 against the original label 'Cultivar' in df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 11"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use sklearn's AgglomerativeClustering to conduct hierarchical clustering for df_standardized and identify three clusters\n",
    "+ Assign cluster membership to each instance in the dataset. Save the cluster membership labels of all instances to a ndarray y_pred3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Leverage the linkage and dendrogram functions of Scipy to create a dendrogram for the hierarchical clustering of df_standardized "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
